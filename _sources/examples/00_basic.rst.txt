
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/00_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_00_basic.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00_basic.py:


Basic Usage of FEMIO
====================

FEMIO can be used as a converter, load data in a format, and write data in
another format.

.. GENERATED FROM PYTHON SOURCE LINES 10-11

Import numpy and :mod:`femio`.

.. GENERATED FROM PYTHON SOURCE LINES 11-15

.. code-block:: Python


    import numpy as np
    import femio








.. GENERATED FROM PYTHON SOURCE LINES 16-24

First, download the
`VTK file <https://github.com/ricosjp/femio/examples/hex.vtk>`_ and
place it in the same directory as that of this script.
If you load the file with
`ParaView <https://www.paraview.org/>`_, it should look as follows.

.. image:: ../../examples/00_basic_fig/hex_raw.png
  :width: 400

.. GENERATED FROM PYTHON SOURCE LINES 26-28

Then, read the file using femio.read_files function.
It returns a :class:`~femio.fem_data.FEMData` object that contains mesh data.

.. GENERATED FROM PYTHON SOURCE LINES 28-31

.. code-block:: Python


    fem_data = femio.read_files('vtk', 'hex.vtk')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Parsing data
    Creating data: NODE
    Creating data: hex




.. GENERATED FROM PYTHON SOURCE LINES 32-33

Elsewise, one can generate a simple mesh using FEMIO's function.

.. GENERATED FROM PYTHON SOURCE LINES 33-36

.. code-block:: Python


    # fem_data = femio.generate_brick('hex', 1, 1, 2)








.. GENERATED FROM PYTHON SOURCE LINES 37-40

A FEMData object has various attributes, e.g., nodes, elements.

The attribute :code:`nodes` has ids and data that means node positions.

.. GENERATED FROM PYTHON SOURCE LINES 40-44

.. code-block:: Python


    print(f"Node IDs:\n{fem_data.nodes.ids}\n")
    print(f"Node data (positions):\n{fem_data.nodes.data}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Node IDs:
    [ 1  2  3  4  5  6  7  8  9 10 11 12]

    Node data (positions):
    [[0.  0.  0. ]
     [0.1 0.  0. ]
     [0.1 0.1 0. ]
     [0.  0.1 0. ]
     [0.  0.  0.2]
     [0.1 0.  0.2]
     [0.1 0.1 0.2]
     [0.  0.1 0.2]
     [0.  0.  0.4]
     [0.1 0.  0.4]
     [0.1 0.1 0.4]
     [0.  0.1 0.4]]




.. GENERATED FROM PYTHON SOURCE LINES 45-47

The attribute :code:`elements` has ids and data that means node
connectivities based on node IDs.

.. GENERATED FROM PYTHON SOURCE LINES 47-51

.. code-block:: Python


    print(f"Element IDs:\n{fem_data.elements.ids}\n")
    print(f"Element data (positions):\n{fem_data.elements.data}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Element IDs:
    [1 2]

    Element data (positions):
    [[ 1  2  3  4  5  6  7  8]
     [ 5  6  7  8  9 10 11 12]]




.. GENERATED FROM PYTHON SOURCE LINES 52-61

Here, please note that the term 'ID' differs from the array's index.
Array's index always starts from zero and is consecutive.
However, ID does not necessarily start from zero and is consecutive.
By default, ID starts from one even if the original format's ID starts
from zero (like VTK).

Please be aware that they correspond to :code:`loc` and :code:`iloc` in
`pandas <https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html>`_,
and one can actually use them to access data.

.. GENERATED FROM PYTHON SOURCE LINES 61-65

.. code-block:: Python


    print(fem_data.nodes.loc[3].values)  # Access with ID
    print(fem_data.nodes.iloc[2].values)  # Access with index





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    [[0.1 0.1 0. ]]
    [[0.1 0.1 0. ]]




.. GENERATED FROM PYTHON SOURCE LINES 66-71

Now, let's add analysis conditions to perform heat analysis using
`FrontISTR <https://github.com/FrontISTR/FrontISTR>`_.

To add boundary conditions, we first create :class:`~FEMAttribute` objects,
then add them to the :code:`fem_data`.

.. GENERATED FROM PYTHON SOURCE LINES 71-75

.. code-block:: Python


    fixtemp = femio.FEMAttribute('fixtemp', np.array([1, 12]), np.array([0., 1.]))
    fem_data.constraints.update({'fixtemp': fixtemp})





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Creating data: fixtemp




.. GENERATED FROM PYTHON SOURCE LINES 76-79

If you want to add several data with the same IDs, you can use the
:meth:`femio.fem_attributes.FEMAttributes.update_data` method.
Here, :code:`'MAT_ALL'` is the ID (can be multiple).

.. GENERATED FROM PYTHON SOURCE LINES 79-87

.. code-block:: Python


    fem_data.materials.update_data(
        'MAT_ALL', {
            'density': np.array([[1., 0.]]),
            'specific_heat': np.array([[1., 0.]]),
            'thermal_conductivity': np.array([[1., 0.]])})
    fem_data.settings['solution_type'] = 'HEAT'





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Creating data: density
    Creating data: specific_heat
    Creating data: thermal_conductivity




.. GENERATED FROM PYTHON SOURCE LINES 88-90

Next, we add the section's information to connect the material defined above
to the element group (:code:`'ALL'` here means all elements in the mesh).

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: Python

    fem_data.sections.update_data(
        'MAT_ALL', {'TYPE': 'SOLID', 'EGRP': 'ALL'})





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Creating data: TYPE
    Creating data: EGRP




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Then, we write a FrontISTR data directory.

.. GENERATED FROM PYTHON SOURCE LINES 95-97

.. code-block:: Python

    fem_data.write('fistr', '00_basic_out/mesh', overwrite=True)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Start writing data
    Start msh header
    2024-05-24 10:59:37.605248
    Start nodes
    2024-05-24 10:59:37.605443
    Start element
    2024-05-24 10:59:37.607563
    Start element group
    2024-05-24 10:59:37.611627
    Start section
    2024-05-24 10:59:37.611684
    Start material
    2024-05-24 10:59:37.615834
    Start cnt header
    2024-05-24 10:59:37.620747
    Start fixtemp
    2024-05-24 10:59:37.620962
    Start cnt setting
    2024-05-24 10:59:37.621764
    File written in: 00_basic_out/mesh.msh
    File written in: 00_basic_out/mesh.cnt
    File written in: 00_basic_out/hecmw_ctrl.dat




.. GENERATED FROM PYTHON SOURCE LINES 98-114

Finally, run FrontISTR like a bash script shown below (Docker required).

.. code-block:: bash

  cd 00_basic_out
  docker pull registry.gitlab.com/frontistr-commons/frontistr/fistr1:master
  docker run -it --sig-proxy=false --rm -u $UID -v $PWD:$PWD -w $PWD \
    registry.gitlab.com/frontistr-commons/frontistr/fistr1:master fistr1 -t 1

If you load the resultant file :code:`00_basic_out/mesh_vis_psf.0001.inp`
in ParaView, it will look as follows.

.. image:: ../../examples/00_basic_fig/res.png
  :width: 400

In addition, you can load that file and analyze the data.

.. GENERATED FROM PYTHON SOURCE LINES 114-119

.. code-block:: Python


    res_fem_data = femio.read_files('ucd', '00_basic_out/mesh_vis_psf.0001.inp')
    temperature = res_fem_data.nodal_data['TEMPERATURE'].data
    print(f"\nCalculated temperature:\n{temperature}\n")
    print(f"Mean temperature:\n{np.mean(temperature)}")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Parsing data
    Reading file: 00_basic_out/mesh_vis_psf.0001.inp
    Creating data: NODE
    Creating data: ELEMENT
    Creating data: TEMPERATURE

    Calculated temperature:
    [[0.        ]
     [0.3002334 ]
     [0.22448547]
     [0.32102695]
     [0.57033736]
     [0.48016126]
     [0.51983874]
     [0.42966264]
     [0.67897305]
     [0.77551453]
     [0.6997666 ]
     [1.        ]]

    Mean temperature:
    0.5





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.498 seconds)


.. _sphx_glr_download_examples_00_basic.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 00_basic.ipynb <00_basic.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 00_basic.py <00_basic.py>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
